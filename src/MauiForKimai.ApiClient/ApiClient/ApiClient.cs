//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace MauiForKimai.ApiClient
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IApiClient
    {
        /// <summary>
        /// Sets the value of a meta-field for an existing activity
        /// </summary>
        /// <param name="id">Activity record ID to set the meta-field value for</param>
        /// <returns>Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActivityEntity> MetaAsync(int id, Body body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets the value of a meta-field for an existing activity
        /// </summary>
        /// <param name="id">Activity record ID to set the meta-field value for</param>
        /// <returns>Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActivityEntity> MetaAsync(int id, Body body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a collection of activities
        /// </summary>
        /// <param name="project">Project ID to filter activities</param>
        /// <param name="projects">Comma separated list of project IDs to filter activities</param>
        /// <param name="visible">Visibility status to filter activities. Allowed values: 1=visible, 2=hidden, 3=all (default: 1)</param>
        /// <param name="globals">Use if you want to fetch only global activities. Allowed values: true (default: false)</param>
        /// <param name="globalsFirst">Deprecated parameter, value is not used any more</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, name, project (default: name)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: ASC)</param>
        /// <param name="term">Free search term</param>
        /// <returns>Returns a collection of activity entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ActivityCollection>> ActivitiesAllAsync(string project, string projects, string visible, string globals, string globalsFirst, string orderBy, string order, string term);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a collection of activities
        /// </summary>
        /// <param name="project">Project ID to filter activities</param>
        /// <param name="projects">Comma separated list of project IDs to filter activities</param>
        /// <param name="visible">Visibility status to filter activities. Allowed values: 1=visible, 2=hidden, 3=all (default: 1)</param>
        /// <param name="globals">Use if you want to fetch only global activities. Allowed values: true (default: false)</param>
        /// <param name="globalsFirst">Deprecated parameter, value is not used any more</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, name, project (default: name)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: ASC)</param>
        /// <param name="term">Free search term</param>
        /// <returns>Returns a collection of activity entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ActivityCollection>> ActivitiesAllAsync(string project, string projects, string visible, string globals, string globalsFirst, string orderBy, string order, string term, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new activity
        /// </summary>
        /// <remarks>
        /// Creates a new activity and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created activity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActivityEntity> ActivitiesPOSTAsync(ActivityEditForm body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new activity
        /// </summary>
        /// <remarks>
        /// Creates a new activity and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created activity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActivityEntity> ActivitiesPOSTAsync(ActivityEditForm body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns one activity
        /// </summary>
        /// <param name="id">Activity ID to fetch</param>
        /// <returns>Returns one activity entity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActivityEntity> ActivitiesGETAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns one activity
        /// </summary>
        /// <param name="id">Activity ID to fetch</param>
        /// <returns>Returns one activity entity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActivityEntity> ActivitiesGETAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an existing activity
        /// </summary>
        /// <remarks>
        /// Update an existing activity, you can pass all or just a subset of all attributes
        /// </remarks>
        /// <param name="id">Activity ID to update</param>
        /// <returns>Returns the updated activity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActivityEntity> ActivitiesPATCHAsync(ActivityEditForm body, int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing activity
        /// </summary>
        /// <remarks>
        /// Update an existing activity, you can pass all or just a subset of all attributes
        /// </remarks>
        /// <param name="id">Activity ID to update</param>
        /// <returns>Returns the updated activity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActivityEntity> ActivitiesPATCHAsync(ActivityEditForm body, int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a collection of all rates for one activity
        /// </summary>
        /// <param name="id">The activity whose rates will be returned</param>
        /// <returns>Returns a collection of activity rate entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ActivityRate>> RatesAllAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a collection of all rates for one activity
        /// </summary>
        /// <param name="id">The activity whose rates will be returned</param>
        /// <returns>Returns a collection of activity rate entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ActivityRate>> RatesAllAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Adds a new rate to an activity
        /// </summary>
        /// <param name="id">The activity to add the rate for</param>
        /// <returns>Returns the new created rate</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActivityRate> RatesPOSTAsync(int id, ActivityRateForm body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds a new rate to an activity
        /// </summary>
        /// <param name="id">The activity to add the rate for</param>
        /// <returns>Returns the new created rate</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActivityRate> RatesPOSTAsync(int id, ActivityRateForm body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes one rate for an activity
        /// </summary>
        /// <param name="id">The activity whose rate will be removed</param>
        /// <param name="rateId">The rate to remove</param>
        /// <returns>Returns no content: 204 on successful delete</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RatesDELETEAsync(int id, int rateId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes one rate for an activity
        /// </summary>
        /// <param name="id">The activity whose rate will be removed</param>
        /// <param name="rateId">The rate to remove</param>
        /// <returns>Returns no content: 204 on successful delete</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RatesDELETEAsync(int id, int rateId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns the user specific locale configuration
        /// </summary>
        /// <returns>Returns the locale specific configurations for this user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<I18nConfig> I18nAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the user specific locale configuration
        /// </summary>
        /// <returns>Returns the locale specific configurations for this user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<I18nConfig> I18nAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns the timesheet configuration
        /// </summary>
        /// <returns>Returns the instance specific timesheet configuration</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimesheetConfig> TimesheetAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the timesheet configuration
        /// </summary>
        /// <returns>Returns the instance specific timesheet configuration</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimesheetConfig> TimesheetAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Sets the value of a meta-field for an existing customer
        /// </summary>
        /// <param name="id">Customer record ID to set the meta-field value for</param>
        /// <returns>Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerEntity> Meta2Async(int id, Body2 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets the value of a meta-field for an existing customer
        /// </summary>
        /// <param name="id">Customer record ID to set the meta-field value for</param>
        /// <returns>Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerEntity> Meta2Async(int id, Body2 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a collection of customers
        /// </summary>
        /// <param name="visible">Visibility status to filter activities (1=visible, 2=hidden, 3=both)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: ASC)</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, name (default: name)</param>
        /// <param name="term">Free search term</param>
        /// <returns>Returns a collection of customer entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomerCollection>> CustomersAllAsync(string visible, string order, string orderBy, string term);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a collection of customers
        /// </summary>
        /// <param name="visible">Visibility status to filter activities (1=visible, 2=hidden, 3=both)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: ASC)</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, name (default: name)</param>
        /// <param name="term">Free search term</param>
        /// <returns>Returns a collection of customer entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomerCollection>> CustomersAllAsync(string visible, string order, string orderBy, string term, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new customer
        /// </summary>
        /// <remarks>
        /// Creates a new customer and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created customer</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerEntity> CustomersPOSTAsync(CustomerEditForm body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new customer
        /// </summary>
        /// <remarks>
        /// Creates a new customer and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created customer</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerEntity> CustomersPOSTAsync(CustomerEditForm body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns one customer
        /// </summary>
        /// <returns>Returns one customer entity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerEntity> CustomersGETAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns one customer
        /// </summary>
        /// <returns>Returns one customer entity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerEntity> CustomersGETAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an existing customer
        /// </summary>
        /// <remarks>
        /// Update an existing customer, you can pass all or just a subset of all attributes
        /// </remarks>
        /// <param name="id">Customer ID to update</param>
        /// <returns>Returns the updated customer</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerEntity> CustomersPATCHAsync(CustomerEditForm body, int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing customer
        /// </summary>
        /// <remarks>
        /// Update an existing customer, you can pass all or just a subset of all attributes
        /// </remarks>
        /// <param name="id">Customer ID to update</param>
        /// <returns>Returns the updated customer</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerEntity> CustomersPATCHAsync(CustomerEditForm body, int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a collection of all rates for one customer
        /// </summary>
        /// <param name="id">The customer whose rates will be returned</param>
        /// <returns>Returns a collection of customer rate entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomerRate>> RatesAll2Async(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a collection of all rates for one customer
        /// </summary>
        /// <param name="id">The customer whose rates will be returned</param>
        /// <returns>Returns a collection of customer rate entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomerRate>> RatesAll2Async(int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Adds a new rate to a customer
        /// </summary>
        /// <param name="id">The customer to add the rate for</param>
        /// <returns>Returns the new created rate</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerRate> RatesPOST2Async(int id, CustomerRateForm body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds a new rate to a customer
        /// </summary>
        /// <param name="id">The customer to add the rate for</param>
        /// <returns>Returns the new created rate</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerRate> RatesPOST2Async(int id, CustomerRateForm body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes one rate for an customer
        /// </summary>
        /// <param name="id">The customer whose rate will be removed</param>
        /// <param name="rateId">The rate to remove</param>
        /// <returns>Returns no content: 204 on successful delete</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RatesDELETE2Async(int id, int rateId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes one rate for an customer
        /// </summary>
        /// <param name="id">The customer whose rate will be removed</param>
        /// <param name="rateId">The rate to remove</param>
        /// <returns>Returns no content: 204 on successful delete</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RatesDELETE2Async(int id, int rateId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Sets the value of a meta-field for an existing project
        /// </summary>
        /// <param name="id">Project record ID to set the meta-field value for</param>
        /// <returns>Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectEntity> Meta3Async(int id, Body3 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets the value of a meta-field for an existing project
        /// </summary>
        /// <param name="id">Project record ID to set the meta-field value for</param>
        /// <returns>Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectEntity> Meta3Async(int id, Body3 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a collection of projects.
        /// </summary>
        /// <param name="customer">Customer ID to filter projects</param>
        /// <param name="customers">Comma separated list of customer IDs to filter projects</param>
        /// <param name="visible">Visibility status to filter projects. Allowed values: 1=visible, 2=hidden, 3=both (default: 1)</param>
        /// <param name="start">Only projects that started before this date will be included. Allowed format: HTML5 (default: now, if end is also empty)</param>
        /// <param name="end">Only projects that ended after this date will be included. Allowed format: HTML5 (default: now, if start is also empty)</param>
        /// <param name="ignoreDates">If set, start and end are completely ignored. Allowed values: 1 (default: off)</param>
        /// <param name="globalActivities">If given, filters projects by their 'global activity' support. Allowed values: 1 (supports global activities) and 0 (without global activities) (default: all)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: ASC)</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, name, customer (default: name)</param>
        /// <param name="term">Free search term</param>
        /// <returns>Returns a collection of project entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectCollection>> ProjectsAllAsync(string customer, string customers, string visible, string start, string end, string ignoreDates, string globalActivities, string order, string orderBy, string term);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a collection of projects.
        /// </summary>
        /// <param name="customer">Customer ID to filter projects</param>
        /// <param name="customers">Comma separated list of customer IDs to filter projects</param>
        /// <param name="visible">Visibility status to filter projects. Allowed values: 1=visible, 2=hidden, 3=both (default: 1)</param>
        /// <param name="start">Only projects that started before this date will be included. Allowed format: HTML5 (default: now, if end is also empty)</param>
        /// <param name="end">Only projects that ended after this date will be included. Allowed format: HTML5 (default: now, if start is also empty)</param>
        /// <param name="ignoreDates">If set, start and end are completely ignored. Allowed values: 1 (default: off)</param>
        /// <param name="globalActivities">If given, filters projects by their 'global activity' support. Allowed values: 1 (supports global activities) and 0 (without global activities) (default: all)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: ASC)</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, name, customer (default: name)</param>
        /// <param name="term">Free search term</param>
        /// <returns>Returns a collection of project entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectCollection>> ProjectsAllAsync(string customer, string customers, string visible, string start, string end, string ignoreDates, string globalActivities, string order, string orderBy, string term, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new project
        /// </summary>
        /// <remarks>
        /// Creates a new project and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created project</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectEntity> ProjectsPOSTAsync(ProjectEditForm body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new project
        /// </summary>
        /// <remarks>
        /// Creates a new project and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created project</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectEntity> ProjectsPOSTAsync(ProjectEditForm body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns one project
        /// </summary>
        /// <returns>Returns one project entity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectEntity> ProjectsGETAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns one project
        /// </summary>
        /// <returns>Returns one project entity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectEntity> ProjectsGETAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an existing project
        /// </summary>
        /// <remarks>
        /// Update an existing project, you can pass all or just a subset of all attributes
        /// </remarks>
        /// <param name="id">Project ID to update</param>
        /// <returns>Returns the updated project</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectEntity> ProjectsPATCHAsync(ProjectEditForm body, int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing project
        /// </summary>
        /// <remarks>
        /// Update an existing project, you can pass all or just a subset of all attributes
        /// </remarks>
        /// <param name="id">Project ID to update</param>
        /// <returns>Returns the updated project</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectEntity> ProjectsPATCHAsync(ProjectEditForm body, int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a collection of all rates for one project
        /// </summary>
        /// <param name="id">The project whose rates will be returned</param>
        /// <returns>Returns a collection of project rate entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectRate>> RatesAll3Async(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a collection of all rates for one project
        /// </summary>
        /// <param name="id">The project whose rates will be returned</param>
        /// <returns>Returns a collection of project rate entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectRate>> RatesAll3Async(int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Adds a new rate to an project
        /// </summary>
        /// <param name="id">The project to add the rate for</param>
        /// <returns>Returns the new created rate</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectRate> RatesPOST3Async(int id, ProjectRateForm body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds a new rate to an project
        /// </summary>
        /// <param name="id">The project to add the rate for</param>
        /// <returns>Returns the new created rate</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectRate> RatesPOST3Async(int id, ProjectRateForm body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes one rate for an project
        /// </summary>
        /// <param name="id">The project whose rate will be removed</param>
        /// <param name="rateId">The rate to remove</param>
        /// <returns>Returns no content: 204 on successful delete</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RatesDELETE3Async(int id, int rateId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes one rate for an project
        /// </summary>
        /// <param name="id">The project whose rate will be removed</param>
        /// <param name="rateId">The rate to remove</param>
        /// <returns>Returns no content: 204 on successful delete</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RatesDELETE3Async(int id, int rateId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// A testing route for the API
        /// </summary>
        /// <returns>A simple route that returns a 'pong', which you can use for testing the API</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PingAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// A testing route for the API
        /// </summary>
        /// <returns>A simple route that returns a 'pong', which you can use for testing the API</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PingAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns information about the Kimai release
        /// </summary>
        /// <returns>Returns version information about the current release</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Version> VersionAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns information about the Kimai release
        /// </summary>
        /// <returns>Returns version information about the current release</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Version> VersionAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns information about installed Plugins
        /// </summary>
        /// <returns>Returns a list of plugin names and versions</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Plugin>> PluginsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns information about installed Plugins
        /// </summary>
        /// <returns>Returns a list of plugin names and versions</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Plugin>> PluginsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Fetch all existing tags
        /// </summary>
        /// <param name="name">Search term to filter tag list</param>
        /// <returns>Returns the collection of all existing tags as string array</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> TagsAllAsync(string name);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch all existing tags
        /// </summary>
        /// <param name="name">Search term to filter tag list</param>
        /// <returns>Returns the collection of all existing tags as string array</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> TagsAllAsync(string name, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new tag
        /// </summary>
        /// <remarks>
        /// Creates a new tag and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created tag</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TagEntity> TagsPOSTAsync(TagEditForm body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new tag
        /// </summary>
        /// <remarks>
        /// Creates a new tag and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created tag</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TagEntity> TagsPOSTAsync(TagEditForm body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a tag
        /// </summary>
        /// <param name="id">Tag ID to delete</param>
        /// <returns>HTTP code 204 for a successful delete</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TagsDELETEAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a tag
        /// </summary>
        /// <param name="id">Tag ID to delete</param>
        /// <returns>HTTP code 204 for a successful delete</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TagsDELETEAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Fetch all existing teams
        /// </summary>
        /// <returns>Returns the collection of all existing teams</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamCollection>> TeamsAllAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch all existing teams
        /// </summary>
        /// <returns>Returns the collection of all existing teams</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamCollection>> TeamsAllAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new team
        /// </summary>
        /// <remarks>
        /// Creates a new team and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created team</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> TeamsPOSTAsync(TeamEditForm body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new team
        /// </summary>
        /// <remarks>
        /// Creates a new team and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created team</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> TeamsPOSTAsync(TeamEditForm body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns one team
        /// </summary>
        /// <returns>Returns one team entity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> TeamsGETAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns one team
        /// </summary>
        /// <returns>Returns one team entity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> TeamsGETAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an existing team
        /// </summary>
        /// <remarks>
        /// Update an existing team, you can pass all or just a subset of all attributes (passing members will replace all existing ones)
        /// </remarks>
        /// <param name="id">Team ID to update</param>
        /// <returns>Returns the updated team</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> TeamsPATCHAsync(TeamEditForm body, int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing team
        /// </summary>
        /// <remarks>
        /// Update an existing team, you can pass all or just a subset of all attributes (passing members will replace all existing ones)
        /// </remarks>
        /// <param name="id">Team ID to update</param>
        /// <returns>Returns the updated team</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> TeamsPATCHAsync(TeamEditForm body, int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a team
        /// </summary>
        /// <param name="id">Team ID to delete</param>
        /// <returns>Delete one team</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TeamsDELETEAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a team
        /// </summary>
        /// <param name="id">Team ID to delete</param>
        /// <returns>Delete one team</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TeamsDELETEAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a new member to a team
        /// </summary>
        /// <param name="id">The team which will receive the new member</param>
        /// <param name="userId">The team member to add (User ID)</param>
        /// <returns>Adds a new user to a team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> MembersPOSTAsync(int id, int userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a new member to a team
        /// </summary>
        /// <param name="id">The team which will receive the new member</param>
        /// <param name="userId">The team member to add (User ID)</param>
        /// <returns>Adds a new user to a team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> MembersPOSTAsync(int id, int userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Removes a member from the team
        /// </summary>
        /// <param name="id">The team from which the member will be removed</param>
        /// <param name="userId">The team member to remove (User ID)</param>
        /// <returns>Removes a user from the team. The teamlead cannot be removed.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> MembersDELETEAsync(int id, int userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes a member from the team
        /// </summary>
        /// <param name="id">The team from which the member will be removed</param>
        /// <param name="userId">The team member to remove (User ID)</param>
        /// <returns>Removes a user from the team. The teamlead cannot be removed.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> MembersDELETEAsync(int id, int userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Grant the team access to a customer
        /// </summary>
        /// <param name="id">The team that is granted access</param>
        /// <param name="customerId">The customer to grant acecess to (Customer ID)</param>
        /// <returns>Adds a new customer to a team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> CustomersPOST2Async(int id, int customerId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Grant the team access to a customer
        /// </summary>
        /// <param name="id">The team that is granted access</param>
        /// <param name="customerId">The customer to grant acecess to (Customer ID)</param>
        /// <returns>Adds a new customer to a team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> CustomersPOST2Async(int id, int customerId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Revokes access for a customer from a team
        /// </summary>
        /// <param name="id">The team whose permission will be revoked</param>
        /// <param name="customerId">The customer to remove (Customer ID)</param>
        /// <returns>Removes a customer from the team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> CustomersDELETEAsync(int id, int customerId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revokes access for a customer from a team
        /// </summary>
        /// <param name="id">The team whose permission will be revoked</param>
        /// <param name="customerId">The customer to remove (Customer ID)</param>
        /// <returns>Removes a customer from the team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> CustomersDELETEAsync(int id, int customerId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Grant the team access to a project
        /// </summary>
        /// <param name="id">The team that is granted access</param>
        /// <param name="projectId">The project to grant acecess to (Project ID)</param>
        /// <returns>Adds a new project to a team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> ProjectsPOST2Async(int id, int projectId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Grant the team access to a project
        /// </summary>
        /// <param name="id">The team that is granted access</param>
        /// <param name="projectId">The project to grant acecess to (Project ID)</param>
        /// <returns>Adds a new project to a team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> ProjectsPOST2Async(int id, int projectId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Revokes access for a project from a team
        /// </summary>
        /// <param name="id">The team whose permission will be revoked</param>
        /// <param name="projectId">The project to remove (Project ID)</param>
        /// <returns>Removes a project from the team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> ProjectsDELETEAsync(int id, int projectId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revokes access for a project from a team
        /// </summary>
        /// <param name="id">The team whose permission will be revoked</param>
        /// <param name="projectId">The project to remove (Project ID)</param>
        /// <returns>Removes a project from the team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> ProjectsDELETEAsync(int id, int projectId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Grant the team access to an activity
        /// </summary>
        /// <param name="id">The team that is granted access</param>
        /// <param name="activityId">The activity to grant acecess to (Activity ID)</param>
        /// <returns>Adds a new activity to a team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> ActivitiesPOST2Async(int id, int activityId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Grant the team access to an activity
        /// </summary>
        /// <param name="id">The team that is granted access</param>
        /// <param name="activityId">The activity to grant acecess to (Activity ID)</param>
        /// <returns>Adds a new activity to a team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> ActivitiesPOST2Async(int id, int activityId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Revokes access for an activity from a team
        /// </summary>
        /// <param name="id">The team whose permission will be revoked</param>
        /// <param name="activityId">The activity to remove (Activity ID)</param>
        /// <returns>Removes a activity from the team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> ActivitiesDELETEAsync(int id, int activityId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revokes access for an activity from a team
        /// </summary>
        /// <param name="id">The team whose permission will be revoked</param>
        /// <param name="activityId">The activity to remove (Activity ID)</param>
        /// <returns>Removes a activity from the team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Team> ActivitiesDELETEAsync(int id, int activityId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns the collection of recent user activities
        /// </summary>
        /// <param name="user">User ID to filter timesheets. Needs permission 'view_other_timesheet', pass 'all' to fetch data for all user (default: current user)</param>
        /// <param name="begin">Only records after this date will be included. Default: today - 1 year (format: HTML5)</param>
        /// <param name="size">The amount of entries (default: 10)</param>
        /// <returns>Returns the collection of recent user activities (always the latest entry of a unique working set grouped by customer, project and activity)</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimesheetCollectionExpanded>> RecentAsync(string user, string begin, string size);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the collection of recent user activities
        /// </summary>
        /// <param name="user">User ID to filter timesheets. Needs permission 'view_other_timesheet', pass 'all' to fetch data for all user (default: current user)</param>
        /// <param name="begin">Only records after this date will be included. Default: today - 1 year (format: HTML5)</param>
        /// <param name="size">The amount of entries (default: 10)</param>
        /// <returns>Returns the collection of recent user activities (always the latest entry of a unique working set grouped by customer, project and activity)</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimesheetCollectionExpanded>> RecentAsync(string user, string begin, string size, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns the collection of active timesheet records
        /// </summary>
        /// <returns>Returns the collection of active timesheet records for the current user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimesheetCollectionExpanded>> ActiveAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the collection of active timesheet records
        /// </summary>
        /// <returns>Returns the collection of active timesheet records for the current user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimesheetCollectionExpanded>> ActiveAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Stops an active timesheet record
        /// </summary>
        /// <param name="id">Timesheet record ID to stop</param>
        /// <returns>Stops an active timesheet record and returns it afterwards.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimesheetEntity> StopAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stops an active timesheet record
        /// </summary>
        /// <param name="id">Timesheet record ID to stop</param>
        /// <returns>Stops an active timesheet record and returns it afterwards.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimesheetEntity> StopAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Restarts a previously stopped timesheet record for the current user
        /// </summary>
        /// <param name="id">Timesheet record ID to restart</param>
        /// <returns>Restarts a timesheet record for the same customer, project, activity combination. The current user will be the owner of the new record. Kimai tries to stop running records, which is expected to fail depending on the configured rules. Data will be copied from the original record if requested.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimesheetEntity> RestartAsync(int id, Body4 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Restarts a previously stopped timesheet record for the current user
        /// </summary>
        /// <param name="id">Timesheet record ID to restart</param>
        /// <returns>Restarts a timesheet record for the same customer, project, activity combination. The current user will be the owner of the new record. Kimai tries to stop running records, which is expected to fail depending on the configured rules. Data will be copied from the original record if requested.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimesheetEntity> RestartAsync(int id, Body4 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Duplicates an existing timesheet record
        /// </summary>
        /// <param name="id">Timesheet record ID to duplicate</param>
        /// <returns>Duplicates a timesheet record, resetting the export state only.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimesheetEntity> DuplicateAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Duplicates an existing timesheet record
        /// </summary>
        /// <param name="id">Timesheet record ID to duplicate</param>
        /// <returns>Duplicates a timesheet record, resetting the export state only.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimesheetEntity> DuplicateAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Switch the export state of a timesheet record to (un-)lock it
        /// </summary>
        /// <param name="id">Timesheet record ID to switch export state</param>
        /// <returns>Switches the exported state on the record and therefor locks / unlocks it for further updates. Needs edit_export_*_timesheet permission.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimesheetEntity> ExportAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Switch the export state of a timesheet record to (un-)lock it
        /// </summary>
        /// <param name="id">Timesheet record ID to switch export state</param>
        /// <returns>Switches the exported state on the record and therefor locks / unlocks it for further updates. Needs edit_export_*_timesheet permission.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimesheetEntity> ExportAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Sets the value of a meta-field for an existing timesheet.
        /// </summary>
        /// <param name="id">Timesheet record ID to set the meta-field value for</param>
        /// <returns>Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimesheetEntity> Meta4Async(int id, Body5 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets the value of a meta-field for an existing timesheet.
        /// </summary>
        /// <param name="id">Timesheet record ID to set the meta-field value for</param>
        /// <returns>Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimesheetEntity> Meta4Async(int id, Body5 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a collection of timesheet records
        /// </summary>
        /// <param name="user">User ID to filter timesheets. Needs permission 'view_other_timesheet', pass 'all' to fetch data for all user (default: current user)</param>
        /// <param name="customer">DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0)</param>
        /// <param name="customers">Comma separated list of customer IDs to filter timesheets</param>
        /// <param name="project">DEPRECATED: Project ID to filter timesheets (will be removed with 2.0)</param>
        /// <param name="projects">Comma separated list of project IDs to filter timesheets</param>
        /// <param name="activity">DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0)</param>
        /// <param name="activities">Comma separated list of activity IDs to filter timesheets</param>
        /// <param name="page">The page to display, renders a 404 if not found (default: 1)</param>
        /// <param name="size">The amount of entries for each page (default: 50)</param>
        /// <param name="tags">Comma separated list of tag names</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: DESC)</param>
        /// <param name="begin">Only records after this date will be included (format: HTML5)</param>
        /// <param name="end">Only records before this date will be included (format: HTML5)</param>
        /// <param name="exported">Use this flag if you want to filter for export state. Allowed values: 0=not exported, 1=exported (default: all)</param>
        /// <param name="active">Filter for running/active records. Allowed values: 0=stopped, 1=active (default: all)</param>
        /// <param name="billable">Filter for non-/billable records. Allowed values: 0=non-billable, 1=billable (default: all)</param>
        /// <param name="full">Allows to fetch fully serialized objects including subresources. Allowed values: true (default: false)</param>
        /// <param name="term">Free search term</param>
        /// <param name="modified_after">Only records changed after this date will be included (format: HTML5). Available since Kimai 1.10 and works only for records that were created/updated since then.</param>
        /// <returns>Returns a collection of timesheets records. Be aware that the datetime fields are given in the users local time including the timezone offset via ISO 8601.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimesheetCollection>> TimesheetsAllAsync(string user, string customer, string customers, string project, string projects, string activity, string activities, string page, string size, string tags, string orderBy, string order, string begin, string end, string exported, string active, string billable, string full, string term, string modified_after);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a collection of timesheet records
        /// </summary>
        /// <param name="user">User ID to filter timesheets. Needs permission 'view_other_timesheet', pass 'all' to fetch data for all user (default: current user)</param>
        /// <param name="customer">DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0)</param>
        /// <param name="customers">Comma separated list of customer IDs to filter timesheets</param>
        /// <param name="project">DEPRECATED: Project ID to filter timesheets (will be removed with 2.0)</param>
        /// <param name="projects">Comma separated list of project IDs to filter timesheets</param>
        /// <param name="activity">DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0)</param>
        /// <param name="activities">Comma separated list of activity IDs to filter timesheets</param>
        /// <param name="page">The page to display, renders a 404 if not found (default: 1)</param>
        /// <param name="size">The amount of entries for each page (default: 50)</param>
        /// <param name="tags">Comma separated list of tag names</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: DESC)</param>
        /// <param name="begin">Only records after this date will be included (format: HTML5)</param>
        /// <param name="end">Only records before this date will be included (format: HTML5)</param>
        /// <param name="exported">Use this flag if you want to filter for export state. Allowed values: 0=not exported, 1=exported (default: all)</param>
        /// <param name="active">Filter for running/active records. Allowed values: 0=stopped, 1=active (default: all)</param>
        /// <param name="billable">Filter for non-/billable records. Allowed values: 0=non-billable, 1=billable (default: all)</param>
        /// <param name="full">Allows to fetch fully serialized objects including subresources. Allowed values: true (default: false)</param>
        /// <param name="term">Free search term</param>
        /// <param name="modified_after">Only records changed after this date will be included (format: HTML5). Available since Kimai 1.10 and works only for records that were created/updated since then.</param>
        /// <returns>Returns a collection of timesheets records. Be aware that the datetime fields are given in the users local time including the timezone offset via ISO 8601.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimesheetCollection>> TimesheetsAllAsync(string user, string customer, string customers, string project, string projects, string activity, string activities, string page, string size, string tags, string orderBy, string order, string begin, string end, string exported, string active, string billable, string full, string term, string modified_after, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new timesheet record
        /// </summary>
        /// <remarks>
        /// Creates a new timesheet record for the current user and returns it afterwards.
        /// </remarks>
        /// <param name="full">Allows to fetch fully serialized objects including subresources (TimesheetEntityExpanded). Allowed values: true (default: false)</param>
        /// <returns>Returns the new created timesheet</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimesheetEntity> TimesheetsPOSTAsync(TimesheetEditForm body, string full);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new timesheet record
        /// </summary>
        /// <remarks>
        /// Creates a new timesheet record for the current user and returns it afterwards.
        /// </remarks>
        /// <param name="full">Allows to fetch fully serialized objects including subresources (TimesheetEntityExpanded). Allowed values: true (default: false)</param>
        /// <returns>Returns the new created timesheet</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimesheetEntity> TimesheetsPOSTAsync(TimesheetEditForm body, string full, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns one timesheet record
        /// </summary>
        /// <param name="id">Timesheet record ID to fetch</param>
        /// <returns>Returns one timesheet record. Be aware that the datetime fields are given in the users local time including the timezone offset via ISO 8601.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimesheetEntity> TimesheetsGETAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns one timesheet record
        /// </summary>
        /// <param name="id">Timesheet record ID to fetch</param>
        /// <returns>Returns one timesheet record. Be aware that the datetime fields are given in the users local time including the timezone offset via ISO 8601.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimesheetEntity> TimesheetsGETAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an existing timesheet record
        /// </summary>
        /// <remarks>
        /// Update an existing timesheet record, you can pass all or just a subset of the attributes.
        /// </remarks>
        /// <param name="id">Timesheet record ID to update</param>
        /// <returns>Returns the updated timesheet</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimesheetEntity> TimesheetsPATCHAsync(int id, TimesheetEditForm body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing timesheet record
        /// </summary>
        /// <remarks>
        /// Update an existing timesheet record, you can pass all or just a subset of the attributes.
        /// </remarks>
        /// <param name="id">Timesheet record ID to update</param>
        /// <returns>Returns the updated timesheet</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimesheetEntity> TimesheetsPATCHAsync(int id, TimesheetEditForm body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an existing timesheet record
        /// </summary>
        /// <param name="id">Timesheet record ID to delete</param>
        /// <returns>Delete one timesheet record</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TimesheetsDELETEAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing timesheet record
        /// </summary>
        /// <param name="id">Timesheet record ID to delete</param>
        /// <returns>Delete one timesheet record</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TimesheetsDELETEAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Return the current user entity
        /// </summary>
        /// <returns>Return the current user entity.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserEntity> MeAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return the current user entity
        /// </summary>
        /// <returns>Return the current user entity.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserEntity> MeAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns the collection of all registered users
        /// </summary>
        /// <param name="visible">Visibility status to filter users. Allowed values: 1=visible, 2=hidden, 3=all (default: 1)</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, username, alias, email (default: username)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: ASC)</param>
        /// <param name="term">Free search term</param>
        /// <returns>Returns the collection of all registered users. Required permission: view_user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserCollection>> UsersAllAsync(string visible, string orderBy, string order, string term);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the collection of all registered users
        /// </summary>
        /// <param name="visible">Visibility status to filter users. Allowed values: 1=visible, 2=hidden, 3=all (default: 1)</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, username, alias, email (default: username)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: ASC)</param>
        /// <param name="term">Free search term</param>
        /// <returns>Returns the collection of all registered users. Required permission: view_user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserCollection>> UsersAllAsync(string visible, string orderBy, string order, string term, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new user
        /// </summary>
        /// <remarks>
        /// Creates a new user and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserEntity> UsersPOSTAsync(UserCreateForm body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new user
        /// </summary>
        /// <remarks>
        /// Creates a new user and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserEntity> UsersPOSTAsync(UserCreateForm body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Return one user entity
        /// </summary>
        /// <param name="id">User ID to fetch</param>
        /// <returns>Return one user entity.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserEntity> UsersGETAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return one user entity
        /// </summary>
        /// <param name="id">User ID to fetch</param>
        /// <returns>Return one user entity.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserEntity> UsersGETAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an existing user
        /// </summary>
        /// <remarks>
        /// Update an existing user, you can pass all or just a subset of all attributes (passing roles will replace all existing ones)
        /// </remarks>
        /// <param name="id">User ID to update</param>
        /// <returns>Returns the updated user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserEntity> UsersPATCHAsync(UserEditForm body, int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing user
        /// </summary>
        /// <remarks>
        /// Update an existing user, you can pass all or just a subset of all attributes (passing roles will replace all existing ones)
        /// </remarks>
        /// <param name="id">User ID to update</param>
        /// <returns>Returns the updated user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserEntity> UsersPATCHAsync(UserEditForm body, int id, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiClient : IApiClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public ApiClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Sets the value of a meta-field for an existing activity
        /// </summary>
        /// <param name="id">Activity record ID to set the meta-field value for</param>
        /// <returns>Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActivityEntity> MetaAsync(int id, Body body)
        {
            return MetaAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets the value of a meta-field for an existing activity
        /// </summary>
        /// <param name="id">Activity record ID to set the meta-field value for</param>
        /// <returns>Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActivityEntity> MetaAsync(int id, Body body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/activities/{id}/meta");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActivityEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a collection of activities
        /// </summary>
        /// <param name="project">Project ID to filter activities</param>
        /// <param name="projects">Comma separated list of project IDs to filter activities</param>
        /// <param name="visible">Visibility status to filter activities. Allowed values: 1=visible, 2=hidden, 3=all (default: 1)</param>
        /// <param name="globals">Use if you want to fetch only global activities. Allowed values: true (default: false)</param>
        /// <param name="globalsFirst">Deprecated parameter, value is not used any more</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, name, project (default: name)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: ASC)</param>
        /// <param name="term">Free search term</param>
        /// <returns>Returns a collection of activity entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ActivityCollection>> ActivitiesAllAsync(string project, string projects, string visible, string globals, string globalsFirst, string orderBy, string order, string term)
        {
            return ActivitiesAllAsync(project, projects, visible, globals, globalsFirst, orderBy, order, term, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a collection of activities
        /// </summary>
        /// <param name="project">Project ID to filter activities</param>
        /// <param name="projects">Comma separated list of project IDs to filter activities</param>
        /// <param name="visible">Visibility status to filter activities. Allowed values: 1=visible, 2=hidden, 3=all (default: 1)</param>
        /// <param name="globals">Use if you want to fetch only global activities. Allowed values: true (default: false)</param>
        /// <param name="globalsFirst">Deprecated parameter, value is not used any more</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, name, project (default: name)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: ASC)</param>
        /// <param name="term">Free search term</param>
        /// <returns>Returns a collection of activity entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ActivityCollection>> ActivitiesAllAsync(string project, string projects, string visible, string globals, string globalsFirst, string orderBy, string order, string term, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/activities?");
            if (project != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("project") + "=").Append(System.Uri.EscapeDataString(ConvertToString(project, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (projects != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("projects") + "=").Append(System.Uri.EscapeDataString(ConvertToString(projects, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (visible != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("visible") + "=").Append(System.Uri.EscapeDataString(ConvertToString(visible, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (globals != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("globals") + "=").Append(System.Uri.EscapeDataString(ConvertToString(globals, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (globalsFirst != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("globalsFirst") + "=").Append(System.Uri.EscapeDataString(ConvertToString(globalsFirst, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (order != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("order") + "=").Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (term != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("term") + "=").Append(System.Uri.EscapeDataString(ConvertToString(term, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ActivityCollection>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a new activity
        /// </summary>
        /// <remarks>
        /// Creates a new activity and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created activity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActivityEntity> ActivitiesPOSTAsync(ActivityEditForm body)
        {
            return ActivitiesPOSTAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new activity
        /// </summary>
        /// <remarks>
        /// Creates a new activity and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created activity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActivityEntity> ActivitiesPOSTAsync(ActivityEditForm body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/activities");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActivityEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns one activity
        /// </summary>
        /// <param name="id">Activity ID to fetch</param>
        /// <returns>Returns one activity entity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActivityEntity> ActivitiesGETAsync(int id)
        {
            return ActivitiesGETAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns one activity
        /// </summary>
        /// <param name="id">Activity ID to fetch</param>
        /// <returns>Returns one activity entity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActivityEntity> ActivitiesGETAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/activities/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActivityEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an existing activity
        /// </summary>
        /// <remarks>
        /// Update an existing activity, you can pass all or just a subset of all attributes
        /// </remarks>
        /// <param name="id">Activity ID to update</param>
        /// <returns>Returns the updated activity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActivityEntity> ActivitiesPATCHAsync(ActivityEditForm body, int id)
        {
            return ActivitiesPATCHAsync(body, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing activity
        /// </summary>
        /// <remarks>
        /// Update an existing activity, you can pass all or just a subset of all attributes
        /// </remarks>
        /// <param name="id">Activity ID to update</param>
        /// <returns>Returns the updated activity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActivityEntity> ActivitiesPATCHAsync(ActivityEditForm body, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/activities/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActivityEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a collection of all rates for one activity
        /// </summary>
        /// <param name="id">The activity whose rates will be returned</param>
        /// <returns>Returns a collection of activity rate entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ActivityRate>> RatesAllAsync(int id)
        {
            return RatesAllAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a collection of all rates for one activity
        /// </summary>
        /// <param name="id">The activity whose rates will be returned</param>
        /// <returns>Returns a collection of activity rate entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ActivityRate>> RatesAllAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/activities/{id}/rates");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ActivityRate>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Adds a new rate to an activity
        /// </summary>
        /// <param name="id">The activity to add the rate for</param>
        /// <returns>Returns the new created rate</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActivityRate> RatesPOSTAsync(int id, ActivityRateForm body)
        {
            return RatesPOSTAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds a new rate to an activity
        /// </summary>
        /// <param name="id">The activity to add the rate for</param>
        /// <returns>Returns the new created rate</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActivityRate> RatesPOSTAsync(int id, ActivityRateForm body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/activities/{id}/rates");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActivityRate>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes one rate for an activity
        /// </summary>
        /// <param name="id">The activity whose rate will be removed</param>
        /// <param name="rateId">The rate to remove</param>
        /// <returns>Returns no content: 204 on successful delete</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RatesDELETEAsync(int id, int rateId)
        {
            return RatesDELETEAsync(id, rateId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes one rate for an activity
        /// </summary>
        /// <param name="id">The activity whose rate will be removed</param>
        /// <param name="rateId">The rate to remove</param>
        /// <returns>Returns no content: 204 on successful delete</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RatesDELETEAsync(int id, int rateId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (rateId == null)
                throw new System.ArgumentNullException("rateId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/activities/{id}/rates/{rateId}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{rateId}", System.Uri.EscapeDataString(ConvertToString(rateId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the user specific locale configuration
        /// </summary>
        /// <returns>Returns the locale specific configurations for this user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<I18nConfig> I18nAsync()
        {
            return I18nAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the user specific locale configuration
        /// </summary>
        /// <returns>Returns the locale specific configurations for this user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<I18nConfig> I18nAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/config/i18n");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<I18nConfig>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the timesheet configuration
        /// </summary>
        /// <returns>Returns the instance specific timesheet configuration</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TimesheetConfig> TimesheetAsync()
        {
            return TimesheetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the timesheet configuration
        /// </summary>
        /// <returns>Returns the instance specific timesheet configuration</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TimesheetConfig> TimesheetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/config/timesheet");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TimesheetConfig>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sets the value of a meta-field for an existing customer
        /// </summary>
        /// <param name="id">Customer record ID to set the meta-field value for</param>
        /// <returns>Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerEntity> Meta2Async(int id, Body2 body)
        {
            return Meta2Async(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets the value of a meta-field for an existing customer
        /// </summary>
        /// <param name="id">Customer record ID to set the meta-field value for</param>
        /// <returns>Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerEntity> Meta2Async(int id, Body2 body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/customers/{id}/meta");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a collection of customers
        /// </summary>
        /// <param name="visible">Visibility status to filter activities (1=visible, 2=hidden, 3=both)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: ASC)</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, name (default: name)</param>
        /// <param name="term">Free search term</param>
        /// <returns>Returns a collection of customer entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomerCollection>> CustomersAllAsync(string visible, string order, string orderBy, string term)
        {
            return CustomersAllAsync(visible, order, orderBy, term, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a collection of customers
        /// </summary>
        /// <param name="visible">Visibility status to filter activities (1=visible, 2=hidden, 3=both)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: ASC)</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, name (default: name)</param>
        /// <param name="term">Free search term</param>
        /// <returns>Returns a collection of customer entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomerCollection>> CustomersAllAsync(string visible, string order, string orderBy, string term, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/customers?");
            if (visible != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("visible") + "=").Append(System.Uri.EscapeDataString(ConvertToString(visible, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (order != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("order") + "=").Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (term != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("term") + "=").Append(System.Uri.EscapeDataString(ConvertToString(term, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CustomerCollection>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a new customer
        /// </summary>
        /// <remarks>
        /// Creates a new customer and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created customer</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerEntity> CustomersPOSTAsync(CustomerEditForm body)
        {
            return CustomersPOSTAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new customer
        /// </summary>
        /// <remarks>
        /// Creates a new customer and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created customer</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerEntity> CustomersPOSTAsync(CustomerEditForm body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/customers");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns one customer
        /// </summary>
        /// <returns>Returns one customer entity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerEntity> CustomersGETAsync(string id)
        {
            return CustomersGETAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns one customer
        /// </summary>
        /// <returns>Returns one customer entity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerEntity> CustomersGETAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/customers/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an existing customer
        /// </summary>
        /// <remarks>
        /// Update an existing customer, you can pass all or just a subset of all attributes
        /// </remarks>
        /// <param name="id">Customer ID to update</param>
        /// <returns>Returns the updated customer</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerEntity> CustomersPATCHAsync(CustomerEditForm body, int id)
        {
            return CustomersPATCHAsync(body, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing customer
        /// </summary>
        /// <remarks>
        /// Update an existing customer, you can pass all or just a subset of all attributes
        /// </remarks>
        /// <param name="id">Customer ID to update</param>
        /// <returns>Returns the updated customer</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerEntity> CustomersPATCHAsync(CustomerEditForm body, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/customers/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a collection of all rates for one customer
        /// </summary>
        /// <param name="id">The customer whose rates will be returned</param>
        /// <returns>Returns a collection of customer rate entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomerRate>> RatesAll2Async(int id)
        {
            return RatesAll2Async(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a collection of all rates for one customer
        /// </summary>
        /// <param name="id">The customer whose rates will be returned</param>
        /// <returns>Returns a collection of customer rate entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomerRate>> RatesAll2Async(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/customers/{id}/rates");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CustomerRate>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Adds a new rate to a customer
        /// </summary>
        /// <param name="id">The customer to add the rate for</param>
        /// <returns>Returns the new created rate</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerRate> RatesPOST2Async(int id, CustomerRateForm body)
        {
            return RatesPOST2Async(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds a new rate to a customer
        /// </summary>
        /// <param name="id">The customer to add the rate for</param>
        /// <returns>Returns the new created rate</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerRate> RatesPOST2Async(int id, CustomerRateForm body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/customers/{id}/rates");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerRate>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes one rate for an customer
        /// </summary>
        /// <param name="id">The customer whose rate will be removed</param>
        /// <param name="rateId">The rate to remove</param>
        /// <returns>Returns no content: 204 on successful delete</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RatesDELETE2Async(int id, int rateId)
        {
            return RatesDELETE2Async(id, rateId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes one rate for an customer
        /// </summary>
        /// <param name="id">The customer whose rate will be removed</param>
        /// <param name="rateId">The rate to remove</param>
        /// <returns>Returns no content: 204 on successful delete</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RatesDELETE2Async(int id, int rateId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (rateId == null)
                throw new System.ArgumentNullException("rateId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/customers/{id}/rates/{rateId}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{rateId}", System.Uri.EscapeDataString(ConvertToString(rateId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sets the value of a meta-field for an existing project
        /// </summary>
        /// <param name="id">Project record ID to set the meta-field value for</param>
        /// <returns>Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProjectEntity> Meta3Async(int id, Body3 body)
        {
            return Meta3Async(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets the value of a meta-field for an existing project
        /// </summary>
        /// <param name="id">Project record ID to set the meta-field value for</param>
        /// <returns>Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectEntity> Meta3Async(int id, Body3 body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/projects/{id}/meta");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a collection of projects.
        /// </summary>
        /// <param name="customer">Customer ID to filter projects</param>
        /// <param name="customers">Comma separated list of customer IDs to filter projects</param>
        /// <param name="visible">Visibility status to filter projects. Allowed values: 1=visible, 2=hidden, 3=both (default: 1)</param>
        /// <param name="start">Only projects that started before this date will be included. Allowed format: HTML5 (default: now, if end is also empty)</param>
        /// <param name="end">Only projects that ended after this date will be included. Allowed format: HTML5 (default: now, if start is also empty)</param>
        /// <param name="ignoreDates">If set, start and end are completely ignored. Allowed values: 1 (default: off)</param>
        /// <param name="globalActivities">If given, filters projects by their 'global activity' support. Allowed values: 1 (supports global activities) and 0 (without global activities) (default: all)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: ASC)</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, name, customer (default: name)</param>
        /// <param name="term">Free search term</param>
        /// <returns>Returns a collection of project entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectCollection>> ProjectsAllAsync(string customer, string customers, string visible, string start, string end, string ignoreDates, string globalActivities, string order, string orderBy, string term)
        {
            return ProjectsAllAsync(customer, customers, visible, start, end, ignoreDates, globalActivities, order, orderBy, term, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a collection of projects.
        /// </summary>
        /// <param name="customer">Customer ID to filter projects</param>
        /// <param name="customers">Comma separated list of customer IDs to filter projects</param>
        /// <param name="visible">Visibility status to filter projects. Allowed values: 1=visible, 2=hidden, 3=both (default: 1)</param>
        /// <param name="start">Only projects that started before this date will be included. Allowed format: HTML5 (default: now, if end is also empty)</param>
        /// <param name="end">Only projects that ended after this date will be included. Allowed format: HTML5 (default: now, if start is also empty)</param>
        /// <param name="ignoreDates">If set, start and end are completely ignored. Allowed values: 1 (default: off)</param>
        /// <param name="globalActivities">If given, filters projects by their 'global activity' support. Allowed values: 1 (supports global activities) and 0 (without global activities) (default: all)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: ASC)</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, name, customer (default: name)</param>
        /// <param name="term">Free search term</param>
        /// <returns>Returns a collection of project entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectCollection>> ProjectsAllAsync(string customer, string customers, string visible, string start, string end, string ignoreDates, string globalActivities, string order, string orderBy, string term, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/projects?");
            if (customer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customers != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customers") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customers, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (visible != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("visible") + "=").Append(System.Uri.EscapeDataString(ConvertToString(visible, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (end != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("end") + "=").Append(System.Uri.EscapeDataString(ConvertToString(end, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ignoreDates != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ignoreDates") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ignoreDates, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (globalActivities != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("globalActivities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(globalActivities, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (order != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("order") + "=").Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (term != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("term") + "=").Append(System.Uri.EscapeDataString(ConvertToString(term, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProjectCollection>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a new project
        /// </summary>
        /// <remarks>
        /// Creates a new project and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created project</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProjectEntity> ProjectsPOSTAsync(ProjectEditForm body)
        {
            return ProjectsPOSTAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new project
        /// </summary>
        /// <remarks>
        /// Creates a new project and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created project</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectEntity> ProjectsPOSTAsync(ProjectEditForm body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/projects");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns one project
        /// </summary>
        /// <returns>Returns one project entity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProjectEntity> ProjectsGETAsync(string id)
        {
            return ProjectsGETAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns one project
        /// </summary>
        /// <returns>Returns one project entity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectEntity> ProjectsGETAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/projects/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an existing project
        /// </summary>
        /// <remarks>
        /// Update an existing project, you can pass all or just a subset of all attributes
        /// </remarks>
        /// <param name="id">Project ID to update</param>
        /// <returns>Returns the updated project</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProjectEntity> ProjectsPATCHAsync(ProjectEditForm body, int id)
        {
            return ProjectsPATCHAsync(body, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing project
        /// </summary>
        /// <remarks>
        /// Update an existing project, you can pass all or just a subset of all attributes
        /// </remarks>
        /// <param name="id">Project ID to update</param>
        /// <returns>Returns the updated project</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectEntity> ProjectsPATCHAsync(ProjectEditForm body, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/projects/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a collection of all rates for one project
        /// </summary>
        /// <param name="id">The project whose rates will be returned</param>
        /// <returns>Returns a collection of project rate entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectRate>> RatesAll3Async(int id)
        {
            return RatesAll3Async(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a collection of all rates for one project
        /// </summary>
        /// <param name="id">The project whose rates will be returned</param>
        /// <returns>Returns a collection of project rate entities</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectRate>> RatesAll3Async(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/projects/{id}/rates");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProjectRate>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Adds a new rate to an project
        /// </summary>
        /// <param name="id">The project to add the rate for</param>
        /// <returns>Returns the new created rate</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProjectRate> RatesPOST3Async(int id, ProjectRateForm body)
        {
            return RatesPOST3Async(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds a new rate to an project
        /// </summary>
        /// <param name="id">The project to add the rate for</param>
        /// <returns>Returns the new created rate</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectRate> RatesPOST3Async(int id, ProjectRateForm body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/projects/{id}/rates");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectRate>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes one rate for an project
        /// </summary>
        /// <param name="id">The project whose rate will be removed</param>
        /// <param name="rateId">The rate to remove</param>
        /// <returns>Returns no content: 204 on successful delete</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RatesDELETE3Async(int id, int rateId)
        {
            return RatesDELETE3Async(id, rateId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes one rate for an project
        /// </summary>
        /// <param name="id">The project whose rate will be removed</param>
        /// <param name="rateId">The rate to remove</param>
        /// <returns>Returns no content: 204 on successful delete</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RatesDELETE3Async(int id, int rateId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (rateId == null)
                throw new System.ArgumentNullException("rateId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/projects/{id}/rates/{rateId}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{rateId}", System.Uri.EscapeDataString(ConvertToString(rateId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// A testing route for the API
        /// </summary>
        /// <returns>A simple route that returns a 'pong', which you can use for testing the API</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PingAsync()
        {
            return PingAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// A testing route for the API
        /// </summary>
        /// <returns>A simple route that returns a 'pong', which you can use for testing the API</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PingAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/ping");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns information about the Kimai release
        /// </summary>
        /// <returns>Returns version information about the current release</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Version> VersionAsync()
        {
            return VersionAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns information about the Kimai release
        /// </summary>
        /// <returns>Returns version information about the current release</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Version> VersionAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Version>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns information about installed Plugins
        /// </summary>
        /// <returns>Returns a list of plugin names and versions</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Plugin>> PluginsAsync()
        {
            return PluginsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns information about installed Plugins
        /// </summary>
        /// <returns>Returns a list of plugin names and versions</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Plugin>> PluginsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/plugins");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Plugin>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Fetch all existing tags
        /// </summary>
        /// <param name="name">Search term to filter tag list</param>
        /// <returns>Returns the collection of all existing tags as string array</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> TagsAllAsync(string name)
        {
            return TagsAllAsync(name, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch all existing tags
        /// </summary>
        /// <param name="name">Search term to filter tag list</param>
        /// <returns>Returns the collection of all existing tags as string array</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> TagsAllAsync(string name, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/tags?");
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a new tag
        /// </summary>
        /// <remarks>
        /// Creates a new tag and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created tag</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TagEntity> TagsPOSTAsync(TagEditForm body)
        {
            return TagsPOSTAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new tag
        /// </summary>
        /// <remarks>
        /// Creates a new tag and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created tag</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TagEntity> TagsPOSTAsync(TagEditForm body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/tags");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TagEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a tag
        /// </summary>
        /// <param name="id">Tag ID to delete</param>
        /// <returns>HTTP code 204 for a successful delete</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task TagsDELETEAsync(int id)
        {
            return TagsDELETEAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a tag
        /// </summary>
        /// <param name="id">Tag ID to delete</param>
        /// <returns>HTTP code 204 for a successful delete</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task TagsDELETEAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/tags/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Fetch all existing teams
        /// </summary>
        /// <returns>Returns the collection of all existing teams</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamCollection>> TeamsAllAsync()
        {
            return TeamsAllAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch all existing teams
        /// </summary>
        /// <returns>Returns the collection of all existing teams</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeamCollection>> TeamsAllAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/teams");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TeamCollection>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a new team
        /// </summary>
        /// <remarks>
        /// Creates a new team and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created team</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Team> TeamsPOSTAsync(TeamEditForm body)
        {
            return TeamsPOSTAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new team
        /// </summary>
        /// <remarks>
        /// Creates a new team and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created team</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Team> TeamsPOSTAsync(TeamEditForm body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/teams");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Team>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns one team
        /// </summary>
        /// <returns>Returns one team entity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Team> TeamsGETAsync(string id)
        {
            return TeamsGETAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns one team
        /// </summary>
        /// <returns>Returns one team entity</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Team> TeamsGETAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/teams/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Team>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an existing team
        /// </summary>
        /// <remarks>
        /// Update an existing team, you can pass all or just a subset of all attributes (passing members will replace all existing ones)
        /// </remarks>
        /// <param name="id">Team ID to update</param>
        /// <returns>Returns the updated team</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Team> TeamsPATCHAsync(TeamEditForm body, int id)
        {
            return TeamsPATCHAsync(body, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing team
        /// </summary>
        /// <remarks>
        /// Update an existing team, you can pass all or just a subset of all attributes (passing members will replace all existing ones)
        /// </remarks>
        /// <param name="id">Team ID to update</param>
        /// <returns>Returns the updated team</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Team> TeamsPATCHAsync(TeamEditForm body, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/teams/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Team>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a team
        /// </summary>
        /// <param name="id">Team ID to delete</param>
        /// <returns>Delete one team</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task TeamsDELETEAsync(int id)
        {
            return TeamsDELETEAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a team
        /// </summary>
        /// <param name="id">Team ID to delete</param>
        /// <returns>Delete one team</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task TeamsDELETEAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/teams/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add a new member to a team
        /// </summary>
        /// <param name="id">The team which will receive the new member</param>
        /// <param name="userId">The team member to add (User ID)</param>
        /// <returns>Adds a new user to a team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Team> MembersPOSTAsync(int id, int userId)
        {
            return MembersPOSTAsync(id, userId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a new member to a team
        /// </summary>
        /// <param name="id">The team which will receive the new member</param>
        /// <param name="userId">The team member to add (User ID)</param>
        /// <returns>Adds a new user to a team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Team> MembersPOSTAsync(int id, int userId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/teams/{id}/members/{userId}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Team>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Removes a member from the team
        /// </summary>
        /// <param name="id">The team from which the member will be removed</param>
        /// <param name="userId">The team member to remove (User ID)</param>
        /// <returns>Removes a user from the team. The teamlead cannot be removed.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Team> MembersDELETEAsync(int id, int userId)
        {
            return MembersDELETEAsync(id, userId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes a member from the team
        /// </summary>
        /// <param name="id">The team from which the member will be removed</param>
        /// <param name="userId">The team member to remove (User ID)</param>
        /// <returns>Removes a user from the team. The teamlead cannot be removed.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Team> MembersDELETEAsync(int id, int userId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/teams/{id}/members/{userId}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Team>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Grant the team access to a customer
        /// </summary>
        /// <param name="id">The team that is granted access</param>
        /// <param name="customerId">The customer to grant acecess to (Customer ID)</param>
        /// <returns>Adds a new customer to a team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Team> CustomersPOST2Async(int id, int customerId)
        {
            return CustomersPOST2Async(id, customerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Grant the team access to a customer
        /// </summary>
        /// <param name="id">The team that is granted access</param>
        /// <param name="customerId">The customer to grant acecess to (Customer ID)</param>
        /// <returns>Adds a new customer to a team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Team> CustomersPOST2Async(int id, int customerId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/teams/{id}/customers/{customerId}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{customerId}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Team>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Revokes access for a customer from a team
        /// </summary>
        /// <param name="id">The team whose permission will be revoked</param>
        /// <param name="customerId">The customer to remove (Customer ID)</param>
        /// <returns>Removes a customer from the team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Team> CustomersDELETEAsync(int id, int customerId)
        {
            return CustomersDELETEAsync(id, customerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revokes access for a customer from a team
        /// </summary>
        /// <param name="id">The team whose permission will be revoked</param>
        /// <param name="customerId">The customer to remove (Customer ID)</param>
        /// <returns>Removes a customer from the team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Team> CustomersDELETEAsync(int id, int customerId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/teams/{id}/customers/{customerId}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{customerId}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Team>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Grant the team access to a project
        /// </summary>
        /// <param name="id">The team that is granted access</param>
        /// <param name="projectId">The project to grant acecess to (Project ID)</param>
        /// <returns>Adds a new project to a team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Team> ProjectsPOST2Async(int id, int projectId)
        {
            return ProjectsPOST2Async(id, projectId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Grant the team access to a project
        /// </summary>
        /// <param name="id">The team that is granted access</param>
        /// <param name="projectId">The project to grant acecess to (Project ID)</param>
        /// <returns>Adds a new project to a team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Team> ProjectsPOST2Async(int id, int projectId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (projectId == null)
                throw new System.ArgumentNullException("projectId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/teams/{id}/projects/{projectId}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{projectId}", System.Uri.EscapeDataString(ConvertToString(projectId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Team>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Revokes access for a project from a team
        /// </summary>
        /// <param name="id">The team whose permission will be revoked</param>
        /// <param name="projectId">The project to remove (Project ID)</param>
        /// <returns>Removes a project from the team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Team> ProjectsDELETEAsync(int id, int projectId)
        {
            return ProjectsDELETEAsync(id, projectId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revokes access for a project from a team
        /// </summary>
        /// <param name="id">The team whose permission will be revoked</param>
        /// <param name="projectId">The project to remove (Project ID)</param>
        /// <returns>Removes a project from the team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Team> ProjectsDELETEAsync(int id, int projectId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (projectId == null)
                throw new System.ArgumentNullException("projectId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/teams/{id}/projects/{projectId}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{projectId}", System.Uri.EscapeDataString(ConvertToString(projectId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Team>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Grant the team access to an activity
        /// </summary>
        /// <param name="id">The team that is granted access</param>
        /// <param name="activityId">The activity to grant acecess to (Activity ID)</param>
        /// <returns>Adds a new activity to a team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Team> ActivitiesPOST2Async(int id, int activityId)
        {
            return ActivitiesPOST2Async(id, activityId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Grant the team access to an activity
        /// </summary>
        /// <param name="id">The team that is granted access</param>
        /// <param name="activityId">The activity to grant acecess to (Activity ID)</param>
        /// <returns>Adds a new activity to a team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Team> ActivitiesPOST2Async(int id, int activityId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (activityId == null)
                throw new System.ArgumentNullException("activityId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/teams/{id}/activities/{activityId}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{activityId}", System.Uri.EscapeDataString(ConvertToString(activityId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Team>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Revokes access for an activity from a team
        /// </summary>
        /// <param name="id">The team whose permission will be revoked</param>
        /// <param name="activityId">The activity to remove (Activity ID)</param>
        /// <returns>Removes a activity from the team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Team> ActivitiesDELETEAsync(int id, int activityId)
        {
            return ActivitiesDELETEAsync(id, activityId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revokes access for an activity from a team
        /// </summary>
        /// <param name="id">The team whose permission will be revoked</param>
        /// <param name="activityId">The activity to remove (Activity ID)</param>
        /// <returns>Removes a activity from the team.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Team> ActivitiesDELETEAsync(int id, int activityId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (activityId == null)
                throw new System.ArgumentNullException("activityId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/teams/{id}/activities/{activityId}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{activityId}", System.Uri.EscapeDataString(ConvertToString(activityId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Team>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the collection of recent user activities
        /// </summary>
        /// <param name="user">User ID to filter timesheets. Needs permission 'view_other_timesheet', pass 'all' to fetch data for all user (default: current user)</param>
        /// <param name="begin">Only records after this date will be included. Default: today - 1 year (format: HTML5)</param>
        /// <param name="size">The amount of entries (default: 10)</param>
        /// <returns>Returns the collection of recent user activities (always the latest entry of a unique working set grouped by customer, project and activity)</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimesheetCollectionExpanded>> RecentAsync(string user, string begin, string size)
        {
            return RecentAsync(user, begin, size, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the collection of recent user activities
        /// </summary>
        /// <param name="user">User ID to filter timesheets. Needs permission 'view_other_timesheet', pass 'all' to fetch data for all user (default: current user)</param>
        /// <param name="begin">Only records after this date will be included. Default: today - 1 year (format: HTML5)</param>
        /// <param name="size">The amount of entries (default: 10)</param>
        /// <returns>Returns the collection of recent user activities (always the latest entry of a unique working set grouped by customer, project and activity)</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimesheetCollectionExpanded>> RecentAsync(string user, string begin, string size, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/timesheets/recent?");
            if (user != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("user") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (begin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("begin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(begin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TimesheetCollectionExpanded>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the collection of active timesheet records
        /// </summary>
        /// <returns>Returns the collection of active timesheet records for the current user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimesheetCollectionExpanded>> ActiveAsync()
        {
            return ActiveAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the collection of active timesheet records
        /// </summary>
        /// <returns>Returns the collection of active timesheet records for the current user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimesheetCollectionExpanded>> ActiveAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/timesheets/active");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TimesheetCollectionExpanded>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stops an active timesheet record
        /// </summary>
        /// <param name="id">Timesheet record ID to stop</param>
        /// <returns>Stops an active timesheet record and returns it afterwards.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TimesheetEntity> StopAsync(int id)
        {
            return StopAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stops an active timesheet record
        /// </summary>
        /// <param name="id">Timesheet record ID to stop</param>
        /// <returns>Stops an active timesheet record and returns it afterwards.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TimesheetEntity> StopAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/timesheets/{id}/stop");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TimesheetEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Restarts a previously stopped timesheet record for the current user
        /// </summary>
        /// <param name="id">Timesheet record ID to restart</param>
        /// <returns>Restarts a timesheet record for the same customer, project, activity combination. The current user will be the owner of the new record. Kimai tries to stop running records, which is expected to fail depending on the configured rules. Data will be copied from the original record if requested.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TimesheetEntity> RestartAsync(int id, Body4 body)
        {
            return RestartAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Restarts a previously stopped timesheet record for the current user
        /// </summary>
        /// <param name="id">Timesheet record ID to restart</param>
        /// <returns>Restarts a timesheet record for the same customer, project, activity combination. The current user will be the owner of the new record. Kimai tries to stop running records, which is expected to fail depending on the configured rules. Data will be copied from the original record if requested.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TimesheetEntity> RestartAsync(int id, Body4 body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/timesheets/{id}/restart");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TimesheetEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Duplicates an existing timesheet record
        /// </summary>
        /// <param name="id">Timesheet record ID to duplicate</param>
        /// <returns>Duplicates a timesheet record, resetting the export state only.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TimesheetEntity> DuplicateAsync(int id)
        {
            return DuplicateAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Duplicates an existing timesheet record
        /// </summary>
        /// <param name="id">Timesheet record ID to duplicate</param>
        /// <returns>Duplicates a timesheet record, resetting the export state only.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TimesheetEntity> DuplicateAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/timesheets/{id}/duplicate");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TimesheetEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Switch the export state of a timesheet record to (un-)lock it
        /// </summary>
        /// <param name="id">Timesheet record ID to switch export state</param>
        /// <returns>Switches the exported state on the record and therefor locks / unlocks it for further updates. Needs edit_export_*_timesheet permission.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TimesheetEntity> ExportAsync(int id)
        {
            return ExportAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Switch the export state of a timesheet record to (un-)lock it
        /// </summary>
        /// <param name="id">Timesheet record ID to switch export state</param>
        /// <returns>Switches the exported state on the record and therefor locks / unlocks it for further updates. Needs edit_export_*_timesheet permission.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TimesheetEntity> ExportAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/timesheets/{id}/export");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TimesheetEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sets the value of a meta-field for an existing timesheet.
        /// </summary>
        /// <param name="id">Timesheet record ID to set the meta-field value for</param>
        /// <returns>Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TimesheetEntity> Meta4Async(int id, Body5 body)
        {
            return Meta4Async(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets the value of a meta-field for an existing timesheet.
        /// </summary>
        /// <param name="id">Timesheet record ID to set the meta-field value for</param>
        /// <returns>Sets the value of an existing/configured meta-field. You cannot create unknown meta-fields, if the given name is not a configured meta-field, this will return an exception.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TimesheetEntity> Meta4Async(int id, Body5 body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/timesheets/{id}/meta");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TimesheetEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a collection of timesheet records
        /// </summary>
        /// <param name="user">User ID to filter timesheets. Needs permission 'view_other_timesheet', pass 'all' to fetch data for all user (default: current user)</param>
        /// <param name="customer">DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0)</param>
        /// <param name="customers">Comma separated list of customer IDs to filter timesheets</param>
        /// <param name="project">DEPRECATED: Project ID to filter timesheets (will be removed with 2.0)</param>
        /// <param name="projects">Comma separated list of project IDs to filter timesheets</param>
        /// <param name="activity">DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0)</param>
        /// <param name="activities">Comma separated list of activity IDs to filter timesheets</param>
        /// <param name="page">The page to display, renders a 404 if not found (default: 1)</param>
        /// <param name="size">The amount of entries for each page (default: 50)</param>
        /// <param name="tags">Comma separated list of tag names</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: DESC)</param>
        /// <param name="begin">Only records after this date will be included (format: HTML5)</param>
        /// <param name="end">Only records before this date will be included (format: HTML5)</param>
        /// <param name="exported">Use this flag if you want to filter for export state. Allowed values: 0=not exported, 1=exported (default: all)</param>
        /// <param name="active">Filter for running/active records. Allowed values: 0=stopped, 1=active (default: all)</param>
        /// <param name="billable">Filter for non-/billable records. Allowed values: 0=non-billable, 1=billable (default: all)</param>
        /// <param name="full">Allows to fetch fully serialized objects including subresources. Allowed values: true (default: false)</param>
        /// <param name="term">Free search term</param>
        /// <param name="modified_after">Only records changed after this date will be included (format: HTML5). Available since Kimai 1.10 and works only for records that were created/updated since then.</param>
        /// <returns>Returns a collection of timesheets records. Be aware that the datetime fields are given in the users local time including the timezone offset via ISO 8601.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimesheetCollection>> TimesheetsAllAsync(string user, string customer, string customers, string project, string projects, string activity, string activities, string page, string size, string tags, string orderBy, string order, string begin, string end, string exported, string active, string billable, string full, string term, string modified_after)
        {
            return TimesheetsAllAsync(user, customer, customers, project, projects, activity, activities, page, size, tags, orderBy, order, begin, end, exported, active, billable, full, term, modified_after, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a collection of timesheet records
        /// </summary>
        /// <param name="user">User ID to filter timesheets. Needs permission 'view_other_timesheet', pass 'all' to fetch data for all user (default: current user)</param>
        /// <param name="customer">DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0)</param>
        /// <param name="customers">Comma separated list of customer IDs to filter timesheets</param>
        /// <param name="project">DEPRECATED: Project ID to filter timesheets (will be removed with 2.0)</param>
        /// <param name="projects">Comma separated list of project IDs to filter timesheets</param>
        /// <param name="activity">DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0)</param>
        /// <param name="activities">Comma separated list of activity IDs to filter timesheets</param>
        /// <param name="page">The page to display, renders a 404 if not found (default: 1)</param>
        /// <param name="size">The amount of entries for each page (default: 50)</param>
        /// <param name="tags">Comma separated list of tag names</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: DESC)</param>
        /// <param name="begin">Only records after this date will be included (format: HTML5)</param>
        /// <param name="end">Only records before this date will be included (format: HTML5)</param>
        /// <param name="exported">Use this flag if you want to filter for export state. Allowed values: 0=not exported, 1=exported (default: all)</param>
        /// <param name="active">Filter for running/active records. Allowed values: 0=stopped, 1=active (default: all)</param>
        /// <param name="billable">Filter for non-/billable records. Allowed values: 0=non-billable, 1=billable (default: all)</param>
        /// <param name="full">Allows to fetch fully serialized objects including subresources. Allowed values: true (default: false)</param>
        /// <param name="term">Free search term</param>
        /// <param name="modified_after">Only records changed after this date will be included (format: HTML5). Available since Kimai 1.10 and works only for records that were created/updated since then.</param>
        /// <returns>Returns a collection of timesheets records. Be aware that the datetime fields are given in the users local time including the timezone offset via ISO 8601.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimesheetCollection>> TimesheetsAllAsync(string user, string customer, string customers, string project, string projects, string activity, string activities, string page, string size, string tags, string orderBy, string order, string begin, string end, string exported, string active, string billable, string full, string term, string modified_after, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/timesheets?");
            if (user != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("user") + "=").Append(System.Uri.EscapeDataString(ConvertToString(user, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customers != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customers") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customers, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (project != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("project") + "=").Append(System.Uri.EscapeDataString(ConvertToString(project, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (projects != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("projects") + "=").Append(System.Uri.EscapeDataString(ConvertToString(projects, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (activity != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("activity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(activity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (activities != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("activities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(activities, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tags != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tags") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tags, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (order != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("order") + "=").Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (begin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("begin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(begin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (end != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("end") + "=").Append(System.Uri.EscapeDataString(ConvertToString(end, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exported != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("exported") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exported, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (active != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("active") + "=").Append(System.Uri.EscapeDataString(ConvertToString(active, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (billable != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("billable") + "=").Append(System.Uri.EscapeDataString(ConvertToString(billable, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (full != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("full") + "=").Append(System.Uri.EscapeDataString(ConvertToString(full, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (term != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("term") + "=").Append(System.Uri.EscapeDataString(ConvertToString(term, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modified_after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modified_after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(modified_after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TimesheetCollection>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a new timesheet record
        /// </summary>
        /// <remarks>
        /// Creates a new timesheet record for the current user and returns it afterwards.
        /// </remarks>
        /// <param name="full">Allows to fetch fully serialized objects including subresources (TimesheetEntityExpanded). Allowed values: true (default: false)</param>
        /// <returns>Returns the new created timesheet</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TimesheetEntity> TimesheetsPOSTAsync(TimesheetEditForm body, string full)
        {
            return TimesheetsPOSTAsync(body, full, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new timesheet record
        /// </summary>
        /// <remarks>
        /// Creates a new timesheet record for the current user and returns it afterwards.
        /// </remarks>
        /// <param name="full">Allows to fetch fully serialized objects including subresources (TimesheetEntityExpanded). Allowed values: true (default: false)</param>
        /// <returns>Returns the new created timesheet</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TimesheetEntity> TimesheetsPOSTAsync(TimesheetEditForm body, string full, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/timesheets?");
            if (full != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("full") + "=").Append(System.Uri.EscapeDataString(ConvertToString(full, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TimesheetEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns one timesheet record
        /// </summary>
        /// <param name="id">Timesheet record ID to fetch</param>
        /// <returns>Returns one timesheet record. Be aware that the datetime fields are given in the users local time including the timezone offset via ISO 8601.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TimesheetEntity> TimesheetsGETAsync(int id)
        {
            return TimesheetsGETAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns one timesheet record
        /// </summary>
        /// <param name="id">Timesheet record ID to fetch</param>
        /// <returns>Returns one timesheet record. Be aware that the datetime fields are given in the users local time including the timezone offset via ISO 8601.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TimesheetEntity> TimesheetsGETAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/timesheets/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TimesheetEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an existing timesheet record
        /// </summary>
        /// <remarks>
        /// Update an existing timesheet record, you can pass all or just a subset of the attributes.
        /// </remarks>
        /// <param name="id">Timesheet record ID to update</param>
        /// <returns>Returns the updated timesheet</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TimesheetEntity> TimesheetsPATCHAsync(int id, TimesheetEditForm body)
        {
            return TimesheetsPATCHAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing timesheet record
        /// </summary>
        /// <remarks>
        /// Update an existing timesheet record, you can pass all or just a subset of the attributes.
        /// </remarks>
        /// <param name="id">Timesheet record ID to update</param>
        /// <returns>Returns the updated timesheet</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TimesheetEntity> TimesheetsPATCHAsync(int id, TimesheetEditForm body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/timesheets/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TimesheetEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an existing timesheet record
        /// </summary>
        /// <param name="id">Timesheet record ID to delete</param>
        /// <returns>Delete one timesheet record</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task TimesheetsDELETEAsync(int id)
        {
            return TimesheetsDELETEAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing timesheet record
        /// </summary>
        /// <param name="id">Timesheet record ID to delete</param>
        /// <returns>Delete one timesheet record</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task TimesheetsDELETEAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/timesheets/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return the current user entity
        /// </summary>
        /// <returns>Return the current user entity.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UserEntity> MeAsync()
        {
            return MeAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return the current user entity
        /// </summary>
        /// <returns>Return the current user entity.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserEntity> MeAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/users/me");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the collection of all registered users
        /// </summary>
        /// <param name="visible">Visibility status to filter users. Allowed values: 1=visible, 2=hidden, 3=all (default: 1)</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, username, alias, email (default: username)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: ASC)</param>
        /// <param name="term">Free search term</param>
        /// <returns>Returns the collection of all registered users. Required permission: view_user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserCollection>> UsersAllAsync(string visible, string orderBy, string order, string term)
        {
            return UsersAllAsync(visible, orderBy, order, term, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the collection of all registered users
        /// </summary>
        /// <param name="visible">Visibility status to filter users. Allowed values: 1=visible, 2=hidden, 3=all (default: 1)</param>
        /// <param name="orderBy">The field by which results will be ordered. Allowed values: id, username, alias, email (default: username)</param>
        /// <param name="order">The result order. Allowed values: ASC, DESC (default: ASC)</param>
        /// <param name="term">Free search term</param>
        /// <returns>Returns the collection of all registered users. Required permission: view_user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserCollection>> UsersAllAsync(string visible, string orderBy, string order, string term, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/users?");
            if (visible != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("visible") + "=").Append(System.Uri.EscapeDataString(ConvertToString(visible, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (order != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("order") + "=").Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (term != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("term") + "=").Append(System.Uri.EscapeDataString(ConvertToString(term, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserCollection>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a new user
        /// </summary>
        /// <remarks>
        /// Creates a new user and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UserEntity> UsersPOSTAsync(UserCreateForm body)
        {
            return UsersPOSTAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new user
        /// </summary>
        /// <remarks>
        /// Creates a new user and returns it afterwards
        /// </remarks>
        /// <returns>Returns the new created user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserEntity> UsersPOSTAsync(UserCreateForm body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/users");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return one user entity
        /// </summary>
        /// <param name="id">User ID to fetch</param>
        /// <returns>Return one user entity.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UserEntity> UsersGETAsync(int id)
        {
            return UsersGETAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return one user entity
        /// </summary>
        /// <param name="id">User ID to fetch</param>
        /// <returns>Return one user entity.</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserEntity> UsersGETAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/users/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an existing user
        /// </summary>
        /// <remarks>
        /// Update an existing user, you can pass all or just a subset of all attributes (passing roles will replace all existing ones)
        /// </remarks>
        /// <param name="id">User ID to update</param>
        /// <returns>Returns the updated user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UserEntity> UsersPATCHAsync(UserEditForm body, int id)
        {
            return UsersPATCHAsync(body, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing user
        /// </summary>
        /// <remarks>
        /// Update an existing user, you can pass all or just a subset of all attributes (passing roles will replace all existing ones)
        /// </remarks>
        /// <param name="id">User ID to update</param>
        /// <returns>Returns the updated user</returns>
        /// <exception cref="KiamiApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserEntity> UsersPATCHAsync(UserEditForm body, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/users/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new KiamiApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KiamiApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new KiamiApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new KiamiApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamMembership
    {
        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Team Team { get; set; } = new Team();

        [Newtonsoft.Json.JsonProperty("teamlead", Required = Newtonsoft.Json.Required.Always)]
        public bool Teamlead { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamMember
    {
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public User User { get; set; } = new User();

        [Newtonsoft.Json.JsonProperty("teamlead", Required = Newtonsoft.Json.Required.Always)]
        public bool Teamlead { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamCollection
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 2)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Team
    {
        [Newtonsoft.Json.JsonProperty("teamlead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Teamlead { get; set; }

        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<User> Users { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 2)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("members", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<TeamMember> Members { get; set; }

        [Newtonsoft.Json.JsonProperty("customers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Customer> Customers { get; set; }

        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Project> Projects { get; set; }

        [Newtonsoft.Json.JsonProperty("activities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Activity> Activities { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TeamEditForm
    {
        /// <summary>
        /// Name of the team
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The hexadecimal color code (default: #d2d6de)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        /// <summary>
        /// All team members
        /// </summary>
        [Newtonsoft.Json.JsonProperty("members", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Members> Members { get; set; } = new System.Collections.ObjectModel.Collection<Members>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserCollection
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(60, MinimumLength = 2)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string AccountNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserEntity
    {
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }

        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timezone { get; set; }

        [Newtonsoft.Json.JsonProperty("preferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserPreference> Preferences { get; set; }

        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Team> Teams { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Avatar { get; set; }

        [Newtonsoft.Json.JsonProperty("memberships", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TeamMembership> Memberships { get; set; }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(60, MinimumLength = 2)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string AccountNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Roles { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserPreference
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 2)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(60, MinimumLength = 2)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string AccountNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserEditForm
    {
        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The hexadecimal color code (default: #d2d6de)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserEditFormLanguage Language { get; set; }

        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Timezone { get; set; }

        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Roles> Roles { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserCreateForm
    {
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The hexadecimal color code (default: #d2d6de)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserCreateFormLanguage Language { get; set; }

        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Timezone { get; set; }

        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Roles2> Roles { get; set; }

        /// <summary>
        /// Plain text password
        /// </summary>
        [Newtonsoft.Json.JsonProperty("plainPassword", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PlainPassword { get; set; }

        /// <summary>
        /// Plain API token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("plainApiToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlainApiToken { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimesheetCollectionExpanded
    {
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? User { get; set; }

        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("begin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Begin { get; set; }

        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? End { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Duration { get; set; }

        [Newtonsoft.Json.JsonProperty("activity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ActivityExpanded Activity { get; set; } = new ActivityExpanded();

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ProjectExpanded Project { get; set; } = new ProjectExpanded();

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public float? Rate { get; set; }

        [Newtonsoft.Json.JsonProperty("internalRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? InternalRate { get; set; }

        [Newtonsoft.Json.JsonProperty("exported", Required = Newtonsoft.Json.Required.Always)]
        public bool Exported { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Always)]
        public bool Billable { get; set; }

        /// <summary>
        /// All visible meta (custom) fields registered with this timesheet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metaFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TimesheetMeta> MetaFields { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimesheetCollection
    {
        [Newtonsoft.Json.JsonProperty("activity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Activity { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Project { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? User { get; set; }

        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("begin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Begin { get; set; }

        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? End { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Duration { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public float? Rate { get; set; }

        [Newtonsoft.Json.JsonProperty("internalRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? InternalRate { get; set; }

        [Newtonsoft.Json.JsonProperty("exported", Required = Newtonsoft.Json.Required.Always)]
        public bool Exported { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Always)]
        public bool Billable { get; set; }

        /// <summary>
        /// All visible meta (custom) fields registered with this timesheet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metaFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TimesheetMeta> MetaFields { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimesheetEntityExpanded
    {
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? User { get; set; }

        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("begin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Begin { get; set; }

        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? End { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Duration { get; set; }

        [Newtonsoft.Json.JsonProperty("activity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ActivityExpanded Activity { get; set; } = new ActivityExpanded();

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ProjectExpanded Project { get; set; } = new ProjectExpanded();

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public float? Rate { get; set; }

        [Newtonsoft.Json.JsonProperty("internalRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? InternalRate { get; set; }

        [Newtonsoft.Json.JsonProperty("fixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public float? FixedRate { get; set; }

        [Newtonsoft.Json.JsonProperty("hourlyRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public float? HourlyRate { get; set; }

        [Newtonsoft.Json.JsonProperty("exported", Required = Newtonsoft.Json.Required.Always)]
        public bool Exported { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Always)]
        public bool Billable { get; set; }

        /// <summary>
        /// All visible meta (custom) fields registered with this timesheet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metaFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TimesheetMeta> MetaFields { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimesheetEntity
    {
        [Newtonsoft.Json.JsonProperty("activity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Activity { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Project { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? User { get; set; }

        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("begin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Begin { get; set; }

        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? End { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Duration { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public float? Rate { get; set; }

        [Newtonsoft.Json.JsonProperty("internalRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? InternalRate { get; set; }

        [Newtonsoft.Json.JsonProperty("fixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public float? FixedRate { get; set; }

        [Newtonsoft.Json.JsonProperty("hourlyRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public float? HourlyRate { get; set; }

        [Newtonsoft.Json.JsonProperty("exported", Required = Newtonsoft.Json.Required.Always)]
        public bool Exported { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Always)]
        public bool Billable { get; set; }

        /// <summary>
        /// All visible meta (custom) fields registered with this timesheet
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metaFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TimesheetMeta> MetaFields { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimesheetEditForm
    {
        [Newtonsoft.Json.JsonProperty("begin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Begin { get; set; }

        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? End { get; set; }

        /// <summary>
        /// Project ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Always)]
        public int Project { get; set; }

        /// <summary>
        /// Activity ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("activity", Required = Newtonsoft.Json.Required.Always)]
        public int Activity { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Fixed rate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FixedRate { get; set; }

        /// <summary>
        /// Hourly rate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hourlyRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HourlyRate { get; set; }

        /// <summary>
        /// User ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? User { get; set; }

        [Newtonsoft.Json.JsonProperty("exported", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Exported { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Billable { get; set; }

        /// <summary>
        /// Comma separated list of tags
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tags { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagEntity
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 2)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"((?!,).)*")]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagEditForm
    {
        /// <summary>
        /// The tag name (forbidden character: comma)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The hexadecimal color code (default: #d2d6de)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivityCollection
    {
        [Newtonsoft.Json.JsonProperty("parentTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentTitle { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Project { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(150, MinimumLength = 2)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Always)]
        public bool Visible { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Always)]
        public bool Billable { get; set; }

        /// <summary>
        /// All visible meta (custom) fields registered with this activity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metaFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ActivityMeta> MetaFields { get; set; }

        /// <summary>
        /// If no team is assigned, everyone can access the activity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Team> Teams { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivityRateForm
    {
        /// <summary>
        /// User ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? User { get; set; }

        /// <summary>
        /// The rate (eg. 10.5)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Always)]
        public double Rate { get; set; }

        /// <summary>
        /// The internal rate (eg. 10.0 or 10)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InternalRate { get; set; }

        /// <summary>
        /// If "true" each time record gets the same rate, regardless of its duration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isFixed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFixed { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivityRate
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User User { get; set; }

        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public float? Rate { get; set; }

        [Newtonsoft.Json.JsonProperty("internalRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? InternalRate { get; set; }

        [Newtonsoft.Json.JsonProperty("isFixed", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFixed { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivityExpanded
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project Project { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(150, MinimumLength = 2)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Always)]
        public bool Visible { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Always)]
        public bool Billable { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Activity
    {
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Project { get; set; }
        //public ProjectExpanded Project { get; set; }


        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(150, MinimumLength = 2)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Always)]
        public bool Visible { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Always)]
        public bool Billable { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivityEntity
    {
        [Newtonsoft.Json.JsonProperty("parentTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentTitle { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Project { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(150, MinimumLength = 2)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Always)]
        public bool Visible { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Always)]
        public bool Billable { get; set; }

        /// <summary>
        /// All visible meta (custom) fields registered with this activity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metaFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ActivityMeta> MetaFields { get; set; }

        /// <summary>
        /// If no team is assigned, everyone can access the activity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Team> Teams { get; set; }

        [Newtonsoft.Json.JsonProperty("budget", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 900000000000D)]
        public float Budget { get; set; }

        [Newtonsoft.Json.JsonProperty("timeBudget", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 2145600000)]
        public int TimeBudget { get; set; }

        [Newtonsoft.Json.JsonProperty("budgetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BudgetType { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivityEditForm
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("invoiceText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceText { get; set; }

        /// <summary>
        /// Project ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Project { get; set; }

        /// <summary>
        /// The hexadecimal color code (default: #d2d6de)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Billable { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectCollection
    {
        [Newtonsoft.Json.JsonProperty("parentTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentTitle { get; set; }

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Customer { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(150, MinimumLength = 2)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? End { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Always)]
        public bool Visible { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Always)]
        public bool Billable { get; set; }

        /// <summary>
        /// All visible meta (custom) fields registered with this project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metaFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectMeta> MetaFields { get; set; }

        /// <summary>
        /// If no team is assigned, everyone can access the project (also depends on the teams of the customer)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Team> Teams { get; set; }

        [Newtonsoft.Json.JsonProperty("globalActivities", Required = Newtonsoft.Json.Required.Always)]
        public bool GlobalActivities { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectRateForm
    {
        /// <summary>
        /// User ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? User { get; set; }

        /// <summary>
        /// The rate (eg. 10.5)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Always)]
        public double Rate { get; set; }

        /// <summary>
        /// The internal rate (eg. 10.0 or 10)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InternalRate { get; set; }

        /// <summary>
        /// If "true" each time record gets the same rate, regardless of its duration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isFixed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFixed { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectRate
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User User { get; set; }

        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public float? Rate { get; set; }

        [Newtonsoft.Json.JsonProperty("internalRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? InternalRate { get; set; }

        [Newtonsoft.Json.JsonProperty("isFixed", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFixed { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectExpanded
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Customer Customer { get; set; } = new Customer();

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(150, MinimumLength = 2)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Always)]
        public bool Visible { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Always)]
        public bool Billable { get; set; }

        [Newtonsoft.Json.JsonProperty("globalActivities", Required = Newtonsoft.Json.Required.Always)]
        public bool GlobalActivities { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Project
    {
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Customer Customer { get; set; } = new Customer();
        //public int? Customer { get; set; }


        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(150, MinimumLength = 2)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Always)]
        public bool Visible { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Always)]
        public bool Billable { get; set; }

        [Newtonsoft.Json.JsonProperty("globalActivities", Required = Newtonsoft.Json.Required.Always)]
        public bool GlobalActivities { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectEntity
    {
        [Newtonsoft.Json.JsonProperty("parentTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentTitle { get; set; }

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Customer { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(150, MinimumLength = 2)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string OrderNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("orderDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OrderDate { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? End { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Always)]
        public bool Visible { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Always)]
        public bool Billable { get; set; }

        /// <summary>
        /// All visible meta (custom) fields registered with this project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metaFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectMeta> MetaFields { get; set; }

        /// <summary>
        /// If no team is assigned, everyone can access the project (also depends on the teams of the customer)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Team> Teams { get; set; }

        [Newtonsoft.Json.JsonProperty("globalActivities", Required = Newtonsoft.Json.Required.Always)]
        public bool GlobalActivities { get; set; }

        [Newtonsoft.Json.JsonProperty("budget", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 900000000000D)]
        public float Budget { get; set; }

        [Newtonsoft.Json.JsonProperty("timeBudget", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 2145600000)]
        public int TimeBudget { get; set; }

        [Newtonsoft.Json.JsonProperty("budgetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BudgetType { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectEditForm
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("invoiceText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceText { get; set; }

        [Newtonsoft.Json.JsonProperty("orderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("orderDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OrderDate { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? End { get; set; }

        /// <summary>
        /// Customer ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Always)]
        public int Customer { get; set; }

        /// <summary>
        /// The hexadecimal color code (default: #d2d6de)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Billable { get; set; }

        [Newtonsoft.Json.JsonProperty("globalActivities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GlobalActivities { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerCollection
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(150, MinimumLength = 2)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Number { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Always)]
        public bool Visible { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Always)]
        public bool Billable { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string Currency { get; set; }

        /// <summary>
        /// All visible meta (custom) fields registered with this customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metaFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerMeta> MetaFields { get; set; }

        /// <summary>
        /// If no team is assigned, everyone can access the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Team> Teams { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerRateForm
    {
        /// <summary>
        /// User ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? User { get; set; }

        /// <summary>
        /// The rate (eg. 10.5)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Always)]
        public double Rate { get; set; }

        /// <summary>
        /// The internal rate (eg. 10.0 or 10)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InternalRate { get; set; }

        /// <summary>
        /// If "true" each time record gets the same rate, regardless of its duration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isFixed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFixed { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerRate
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User User { get; set; }

        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public float? Rate { get; set; }

        [Newtonsoft.Json.JsonProperty("internalRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? InternalRate { get; set; }

        [Newtonsoft.Json.JsonProperty("isFixed", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFixed { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Customer
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(150, MinimumLength = 2)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Number { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Always)]
        public bool Visible { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Always)]
        public bool Billable { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerEntity
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(150, MinimumLength = 2)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Number { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Always)]
        public bool Visible { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Always)]
        public bool Billable { get; set; }

        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Company { get; set; }

        [Newtonsoft.Json.JsonProperty("vatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string VatId { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Phone { get; set; }

        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Fax { get; set; }

        [Newtonsoft.Json.JsonProperty("mobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Mobile { get; set; }

        /// <summary>
        /// Limited via RFC to 254 chars
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(254)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Homepage { get; set; }

        /// <summary>
        /// Length was determined by a MySQL column via "use mysql;describe time_zone_name;"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Timezone { get; set; }

        /// <summary>
        /// All visible meta (custom) fields registered with this customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metaFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerMeta> MetaFields { get; set; }

        /// <summary>
        /// If no team is assigned, everyone can access the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Team> Teams { get; set; }

        [Newtonsoft.Json.JsonProperty("budget", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 900000000000D)]
        public float Budget { get; set; }

        [Newtonsoft.Json.JsonProperty("timeBudget", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 2145600000)]
        public int TimeBudget { get; set; }

        [Newtonsoft.Json.JsonProperty("budgetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BudgetType { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerEditForm
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }

        [Newtonsoft.Json.JsonProperty("vatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VatId { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }

        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fax { get; set; }

        [Newtonsoft.Json.JsonProperty("mobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mobile { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Homepage { get; set; }

        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Timezone { get; set; }

        /// <summary>
        /// The hexadecimal color code (default: #d2d6de)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        [Newtonsoft.Json.JsonProperty("billable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Billable { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class I18nConfig
    {
        [Newtonsoft.Json.JsonProperty("formDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormDate { get; set; }

        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Time { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }

        [Newtonsoft.Json.JsonProperty("is24hours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is24hours { get; set; }

        [Newtonsoft.Json.JsonProperty("now", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Now { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimesheetConfig
    {
        [Newtonsoft.Json.JsonProperty("trackingMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingMode { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultBeginTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultBeginTime { get; set; }

        [Newtonsoft.Json.JsonProperty("activeEntriesHardLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActiveEntriesHardLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("activeEntriesSoftLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActiveEntriesSoftLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("isAllowFutureTimes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAllowFutureTimes { get; set; }

        [Newtonsoft.Json.JsonProperty("isAllowOverlapping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAllowOverlapping { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Version
    {
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version1 { get; set; }

        /// <summary>
        /// Follows the same logic as PHP_VERSION_ID, see https://www.php.net/manual/de/function.phpversion.php
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("candidate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Candidate { get; set; }

        [Newtonsoft.Json.JsonProperty("semver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Semver { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Copyright { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Plugin
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimesheetMeta
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 2)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65535)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivityMeta
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 2)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65535)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectMeta
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 2)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65535)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerMeta
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 2)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(65535)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body
    {
        /// <summary>
        /// The meta-field name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The meta-field value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body2
    {
        /// <summary>
        /// The meta-field name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The meta-field value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body3
    {
        /// <summary>
        /// The meta-field name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The meta-field value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body4
    {
        /// <summary>
        /// Whether data should be copied to the new entry. Allowed values: all, tags (deprecated), rates (deprecated), description (deprecated), meta (deprecated) (default: nothing is copied)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("copy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"all|tags|rates|meta|description")]
        public string Copy { get; set; }

        /// <summary>
        /// Changes the restart date to the given one (default: now)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("begin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Begin { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body5
    {
        /// <summary>
        /// The meta-field name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The meta-field value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Members
    {
        /// <summary>
        /// User ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? User { get; set; }

        /// <summary>
        /// Whether the user is a teamlead
        /// </summary>
        [Newtonsoft.Json.JsonProperty("teamlead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Teamlead { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserEditFormLanguage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"da")]
        Da = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"de_AT")]
        De_AT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"de_CH")]
        De_CH = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"en")]
        En = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"en_GB")]
        En_GB = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"eo")]
        Eo = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"eu")]
        Eu = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"fa")]
        Fa = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"fo")]
        Fo = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"he")]
        He = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ja")]
        Ja = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ko")]
        Ko = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"nb_NO")]
        Nb_NO = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"pt_BR")]
        Pt_BR = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"vi")]
        Vi = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"zh_CN")]
        Zh_CN = 34,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Roles
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ROLE_TEAMLEAD")]
        ROLE_TEAMLEAD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ROLE_ADMIN")]
        ROLE_ADMIN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ROLE_SUPER_ADMIN")]
        ROLE_SUPER_ADMIN = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserCreateFormLanguage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"da")]
        Da = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"de_AT")]
        De_AT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"de_CH")]
        De_CH = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"en")]
        En = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"en_GB")]
        En_GB = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"eo")]
        Eo = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"eu")]
        Eu = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"fa")]
        Fa = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"fo")]
        Fo = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"he")]
        He = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ja")]
        Ja = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ko")]
        Ko = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"nb_NO")]
        Nb_NO = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"pt_BR")]
        Pt_BR = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"vi")]
        Vi = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"zh_CN")]
        Zh_CN = 34,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Roles2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ROLE_TEAMLEAD")]
        ROLE_TEAMLEAD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ROLE_ADMIN")]
        ROLE_ADMIN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ROLE_SUPER_ADMIN")]
        ROLE_SUPER_ADMIN = 2,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KiamiApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public KiamiApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KiamiApiException<TResult> : KiamiApiException
    {
        public TResult Result { get; private set; }

        public KiamiApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603